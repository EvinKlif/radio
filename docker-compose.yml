version: '3.8'

services:
  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    env_file:
      - .env
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - media_network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - media_network
    restart: unless-stopped

  gstreamer:
    build: ./gstreamer
    container_name: gstreamer
    depends_on:
      - minio
      - redis
      - mediasoup
    env_file:
      - .env
    networks:
      - media_network
    ports:
      - "40111:40111/udp"
    restart: unless-stopped

  mediasoup:
    build:
      context: ./mediasoup
      dockerfile: Dockerfile
    container_name: radio-mediasoup-1  # Явно задаём имя контейнера
    ports:
      - "3000:3000"
      - "40000-40100:40000-40100/udp"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    networks:
      - media_network

  coturn:
    image: coturn/coturn
    container_name: coturn
    networks:
      - media_network
    restart: unless-stopped
    volumes:
      - ./coturn/turnserver.conf:/etc/coturn/turnserver.conf
    ports:
      - "3478:3478/udp"
      - "3479:3479/udp"
      - "49152-49200:49152-49200/udp"
    command: ["-v", "--no-cli", "--log-file=stdout"]

  backend:
    build: ./backend
    container_name: radio-backend-1  # Явно задаём имя контейнера
    env_file:
      - .env
    networks:
      - media_network
    expose:
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15
    container_name: radio-postgres-1  # Явно задаём имя контейнера
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - media_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d trackinfo" ]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-builder
    volumes:
      - ./frontend-dist:/build-output
    networks:
      - media_network

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend-dist:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - media_network
    depends_on:
      - frontend
      - backend
      - mediasoup
      - minio

volumes:
  minio_data:
  redis_data:
  postgres_data:
  frontend-dist:

networks:
  media_network:
    external: true